// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.kylincloud.org/kylincloud/nucleus/src/ent/base"
)

// Base is the model entity for the Base schema.
type Base struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int `json:"id,omitempty"`
	// creation time of item
	CreatedAt time.Time `json:"created_at,omitempty"`
	// update time of item
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Base) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case base.FieldID:
			values[i] = new(sql.NullInt64)
		case base.FieldCreatedAt, base.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Base", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Base fields.
func (b *Base) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case base.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case base.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case base.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = new(time.Time)
				*b.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Base.
// Note that you need to call Base.Unwrap() before calling this method if this Base
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Base) Update() *BaseUpdateOne {
	return (&BaseClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Base entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Base) Unwrap() *Base {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Base is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Base) String() string {
	var builder strings.Builder
	builder.WriteString("Base(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := b.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Bases is a parsable slice of Base.
type Bases []*Base

func (b Bases) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}

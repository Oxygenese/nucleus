// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.kylincloud.org/kylincloud/nucleus/src/ent/basemodel"
)

// BaseModel is the model entity for the BaseModel schema.
type BaseModel struct {
	config `json:"-"`
	// ID of the ent.
	// primary key
	ID int `json:"id,omitempty"`
	// creation time of item
	CreatedAt time.Time `json:"created_at,omitempty"`
	// update time of item
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BaseModel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case basemodel.FieldID:
			values[i] = new(sql.NullInt64)
		case basemodel.FieldCreatedAt, basemodel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BaseModel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BaseModel fields.
func (bm *BaseModel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case basemodel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bm.ID = int(value.Int64)
		case basemodel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bm.CreatedAt = value.Time
			}
		case basemodel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bm.UpdatedAt = new(time.Time)
				*bm.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BaseModel.
// Note that you need to call BaseModel.Unwrap() before calling this method if this BaseModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (bm *BaseModel) Update() *BaseModelUpdateOne {
	return (&BaseModelClient{config: bm.config}).UpdateOne(bm)
}

// Unwrap unwraps the BaseModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bm *BaseModel) Unwrap() *BaseModel {
	_tx, ok := bm.config.driver.(*txDriver)
	if !ok {
		panic("ent: BaseModel is not a transactional entity")
	}
	bm.config.driver = _tx.drv
	return bm
}

// String implements the fmt.Stringer.
func (bm *BaseModel) String() string {
	var builder strings.Builder
	builder.WriteString("BaseModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bm.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BaseModels is a parsable slice of BaseModel.
type BaseModels []*BaseModel

func (bm BaseModels) config(cfg config) {
	for _i := range bm {
		bm[_i].config = cfg
	}
}

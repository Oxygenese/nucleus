// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.kylincloud.org/kylincloud/nucleus/src/ent/basemodel"
	"gitlab.kylincloud.org/kylincloud/nucleus/src/ent/predicate"
)

// BaseModelUpdate is the builder for updating BaseModel entities.
type BaseModelUpdate struct {
	config
	hooks    []Hook
	mutation *BaseModelMutation
}

// Where appends a list predicates to the BaseModelUpdate builder.
func (bmu *BaseModelUpdate) Where(ps ...predicate.BaseModel) *BaseModelUpdate {
	bmu.mutation.Where(ps...)
	return bmu
}

// SetUpdatedAt sets the "updated_at" field.
func (bmu *BaseModelUpdate) SetUpdatedAt(t time.Time) *BaseModelUpdate {
	bmu.mutation.SetUpdatedAt(t)
	return bmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bmu *BaseModelUpdate) ClearUpdatedAt() *BaseModelUpdate {
	bmu.mutation.ClearUpdatedAt()
	return bmu
}

// Mutation returns the BaseModelMutation object of the builder.
func (bmu *BaseModelUpdate) Mutation() *BaseModelMutation {
	return bmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bmu *BaseModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bmu.defaults()
	if len(bmu.hooks) == 0 {
		affected, err = bmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BaseModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bmu.mutation = mutation
			affected, err = bmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bmu.hooks) - 1; i >= 0; i-- {
			if bmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bmu *BaseModelUpdate) SaveX(ctx context.Context) int {
	affected, err := bmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bmu *BaseModelUpdate) Exec(ctx context.Context) error {
	_, err := bmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmu *BaseModelUpdate) ExecX(ctx context.Context) {
	if err := bmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmu *BaseModelUpdate) defaults() {
	if _, ok := bmu.mutation.UpdatedAt(); !ok && !bmu.mutation.UpdatedAtCleared() {
		v := basemodel.UpdateDefaultUpdatedAt()
		bmu.mutation.SetUpdatedAt(v)
	}
}

func (bmu *BaseModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basemodel.Table,
			Columns: basemodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basemodel.FieldID,
			},
		},
	}
	if ps := bmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basemodel.FieldUpdatedAt,
		})
	}
	if bmu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basemodel.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basemodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BaseModelUpdateOne is the builder for updating a single BaseModel entity.
type BaseModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BaseModelMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bmuo *BaseModelUpdateOne) SetUpdatedAt(t time.Time) *BaseModelUpdateOne {
	bmuo.mutation.SetUpdatedAt(t)
	return bmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bmuo *BaseModelUpdateOne) ClearUpdatedAt() *BaseModelUpdateOne {
	bmuo.mutation.ClearUpdatedAt()
	return bmuo
}

// Mutation returns the BaseModelMutation object of the builder.
func (bmuo *BaseModelUpdateOne) Mutation() *BaseModelMutation {
	return bmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bmuo *BaseModelUpdateOne) Select(field string, fields ...string) *BaseModelUpdateOne {
	bmuo.fields = append([]string{field}, fields...)
	return bmuo
}

// Save executes the query and returns the updated BaseModel entity.
func (bmuo *BaseModelUpdateOne) Save(ctx context.Context) (*BaseModel, error) {
	var (
		err  error
		node *BaseModel
	)
	bmuo.defaults()
	if len(bmuo.hooks) == 0 {
		node, err = bmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BaseModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bmuo.mutation = mutation
			node, err = bmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bmuo.hooks) - 1; i >= 0; i-- {
			if bmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BaseModel)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BaseModelMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bmuo *BaseModelUpdateOne) SaveX(ctx context.Context) *BaseModel {
	node, err := bmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bmuo *BaseModelUpdateOne) Exec(ctx context.Context) error {
	_, err := bmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmuo *BaseModelUpdateOne) ExecX(ctx context.Context) {
	if err := bmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmuo *BaseModelUpdateOne) defaults() {
	if _, ok := bmuo.mutation.UpdatedAt(); !ok && !bmuo.mutation.UpdatedAtCleared() {
		v := basemodel.UpdateDefaultUpdatedAt()
		bmuo.mutation.SetUpdatedAt(v)
	}
}

func (bmuo *BaseModelUpdateOne) sqlSave(ctx context.Context) (_node *BaseModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   basemodel.Table,
			Columns: basemodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: basemodel.FieldID,
			},
		},
	}
	id, ok := bmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BaseModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, basemodel.FieldID)
		for _, f := range fields {
			if !basemodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != basemodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: basemodel.FieldUpdatedAt,
		})
	}
	if bmuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: basemodel.FieldUpdatedAt,
		})
	}
	_node = &BaseModel{config: bmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{basemodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
